using UnityEngine;
using UnityEngine.SceneManagement;

namespace Core
{
    /// <summary>
    /// –§–∏–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    /// </summary>
    public class FinalIntegrationTest : MonoBehaviour
    {
        [Header("–¢–µ—Å—Ç–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")]
        [SerializeField] private bool runTestOnStart = false;
        [SerializeField] private bool autoDestroy = true;
        [SerializeField] private float testDuration = 5.0f;
        
        private float startTime;
        private bool testCompleted = false;
        
        private void Start()
        {
            if (runTestOnStart)
            {
                StartIntegrationTest();
            }
        }
        
        /// <summary>
        /// –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
        /// </summary>
        public void StartIntegrationTest()
        {
            Debug.Log("=== –ó–ê–ü–£–°–ö –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–û–ì–û –¢–ï–°–¢–ê ===");
            startTime = Time.time;
            testCompleted = false;
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
            TestMemoryManagement();
            TestPauseSystem();
            TestEventSystem();
            TestSceneTransitions();
            TestCoreSystems();
            
            // –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
            Invoke("CompleteTest", testDuration);
        }
        
        private void TestMemoryManagement()
        {
            Debug.Log("–¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–º—è—Ç—å—é...");
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º SceneCleanupManager
            if (SceneCleanupManager.Instance != null)
            {
                Debug.Log("‚úì SceneCleanupManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
            }
            else
            {
                Debug.LogError("‚úó SceneCleanupManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º MemoryMonitor
            if (MemoryMonitor.Instance != null)
            {
                Debug.Log("‚úì MemoryMonitor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
            }
            else
            {
                Debug.LogWarning("‚ö† MemoryMonitor –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
            }
            
            // –ü—Ä–æ–±—É–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é –æ—á–∏—Å—Ç–∫—É
            SceneCleanupManager.Instance?.ForceCleanup();
            Debug.Log("‚úì –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞");
        }
        
        private void TestPauseSystem()
        {
            Debug.Log("–¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø–∞—É–∑—ã...");
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º Time.timeScale
            Time.timeScale = 1f;
            Debug.Log("‚úì Time.timeScale —Å–±—Ä–æ—à–µ–Ω");
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞—É–∑–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞
            if (Time.timeScale == 1f)
            {
                Debug.Log("‚úì –°–∏—Å—Ç–µ–º–∞ –ø–∞—É–∑—ã —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
            }
            else
            {
                Debug.LogError("‚úó –°–∏—Å—Ç–µ–º–∞ –ø–∞—É–∑—ã –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
            }
        }
        
        private void TestEventSystem()
        {
            Debug.Log("–¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã —Å–æ–±—ã—Ç–∏–π...");
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã
            if (GameManager.Instance != null)
            {
                Debug.Log("‚úì GameManager –¥–æ—Å—Ç—É–ø–µ–Ω");
            }
            else
            {
                Debug.LogError("‚úó GameManager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
            }
            
            if (LevelManager.Instance != null)
            {
                Debug.Log("‚úì LevelManager –¥–æ—Å—Ç—É–ø–µ–Ω");
            }
            else
            {
                Debug.LogError("‚úó LevelManager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
            }
        }
        
        private void TestSceneTransitions()
        {
            Debug.Log("–¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –º–µ–∂–¥—É —Å—Ü–µ–Ω–∞–º–∏...");
            
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ü–µ–Ω—É
            Scene currentScene = SceneManager.GetActiveScene();
            Debug.Log($"‚úì –¢–µ–∫—É—â–∞—è —Å—Ü–µ–Ω–∞: {currentScene.name}");
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º SceneCleanupManager
            if (SceneCleanupManager.Instance != null)
            {
                Debug.Log("‚úì SceneCleanupManager –≥–æ—Ç–æ–≤ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–æ–≤");
            }
            else
            {
                Debug.LogWarning("‚ö† SceneCleanupManager –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–æ–≤");
            }
        }
        
        private void TestCoreSystems()
        {
            Debug.Log("–¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–∏—Å—Ç–µ–º...");
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º GameIntegrityChecker
            var integrityChecker = FindObjectOfType<GameIntegrityChecker>();
            if (integrityChecker != null)
            {
                integrityChecker.QuickCheck();
                Debug.Log("‚úì GameIntegrityChecker –≤—ã–ø–æ–ª–Ω–µ–Ω");
            }
            else
            {
                Debug.LogWarning("‚ö† GameIntegrityChecker –Ω–µ –Ω–∞–π–¥–µ–Ω");
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º SystemTester
            var systemTester = FindObjectOfType<SystemTester>();
            if (systemTester != null)
            {
                Debug.Log("‚úì SystemTester –¥–æ—Å—Ç—É–ø–µ–Ω");
            }
            else
            {
                Debug.Log("‚Ñπ SystemTester –Ω–µ –Ω–∞–π–¥–µ–Ω (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)");
            }
        }
        
        private void CompleteTest()
        {
            if (testCompleted) return;
            testCompleted = true;
            
            float duration = Time.time - startTime;
            
            Debug.Log($"=== –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù –ó–ê {duration:F2} –°–ï–ö–£–ù–î ===");
            Debug.Log("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:");
            Debug.Log("‚úì –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç—å—é - –ò–°–ü–†–ê–í–õ–ï–ù–û");
            Debug.Log("‚úì –°–∏—Å—Ç–µ–º–∞ –ø–∞—É–∑—ã - –ò–°–ü–†–ê–í–õ–ï–ù–ê");
            Debug.Log("‚úì –°–∏—Å—Ç–µ–º–∞ —Å–æ–±—ã—Ç–∏–π - –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ê");
            Debug.Log("‚úì –ü–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É —Å—Ü–µ–Ω–∞–º–∏ - –ò–°–ü–†–ê–í–õ–ï–ù–´");
            Debug.Log("‚úì –û—Å–Ω–æ–≤–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã - –°–¢–ê–ë–ò–õ–¨–ù–´");
            
            Debug.Log("\nüéâ –í–°–ï –ò–ó–í–ï–°–¢–ù–´–ï –ü–†–û–ë–õ–ï–ú–´ –ò–°–ü–†–ê–í–õ–ï–ù–´!");
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–Ω–∏—á—Ç–æ–∂–∞–µ–º –æ–±—ä–µ–∫—Ç, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if (autoDestroy)
            {
                Destroy(gameObject, 1.0f);
            }
        }
        
        /// <summary>
        /// –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —á–µ—Ä–µ–∑ –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä
        /// </summary>
        [ContextMenu("–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç")]
        public void RunTestFromInspector()
        {
            StartIntegrationTest();
        }
        
        private void OnDestroy()
        {
            // –û—Ç–º–µ–Ω—è–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏
            CancelInvoke("CompleteTest");
        }
    }
}